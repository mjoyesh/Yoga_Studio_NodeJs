{"ast":null,"code":"import axios from 'axios';\nimport HttpError from 'standard-http-error';\nimport get from 'lodash/get';\nimport { serialize } from './helper';\nexport const successResponse = response => ({\n  status: response.status,\n  data: response.data\n});\nexport const throwHttpError = error => {\n  if (error.response.data) {\n    throw new HttpError(get(error, 'response.data.status.code'), get(error, 'response.data.status.message'), {\n      data: error.response.data\n    });\n  }\n\n  throw new HttpError(error.response.status, error.response.statusText);\n};\nexport default (async (request, httpService = axios) => {\n  const method = request.method,\n        data = request.data,\n        headers = request.headers;\n  let url = request.url;\n  const params = new URLSearchParams();\n\n  if (headers['Content-Type'] == 'application/x-www-form-urlencoded') {\n    Object.keys(data).map(keyName => params.append(keyName, data[keyName]));\n    return httpService.post(url, params);\n  } else {\n    if (method === 'GET') {\n      if (data) {\n        url += `?${serialize(data)}`;\n      }\n    }\n\n    return httpService.request({\n      method,\n      url,\n      headers: Object.assign({}, headers),\n      data\n    }).then(successResponse, error => {\n      console.log('server error occured ==>', error); // throwHttpError(error);\n    });\n  }\n});","map":{"version":3,"sources":["/home/ttn/Documents/yoga_studio/src/Services/requestService.js"],"names":["axios","HttpError","get","serialize","successResponse","response","status","data","throwHttpError","error","statusText","request","httpService","method","headers","url","params","URLSearchParams","Object","keys","map","keyName","append","post","assign","then","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,SAASC,SAAT,QAA0B,UAA1B;AAEA,OAAO,MAAMC,eAAe,GAAGC,QAAQ,KAAK;AAC1CC,EAAAA,MAAM,EAAED,QAAQ,CAACC,MADyB;AAE1CC,EAAAA,IAAI,EAAEF,QAAQ,CAACE;AAF2B,CAAL,CAAhC;AAKP,OAAO,MAAMC,cAAc,GAAGC,KAAK,IAAI;AACrC,MAAIA,KAAK,CAACJ,QAAN,CAAeE,IAAnB,EAAyB;AACvB,UAAM,IAAIN,SAAJ,CACJC,GAAG,CAACO,KAAD,EAAQ,2BAAR,CADC,EAEJP,GAAG,CAACO,KAAD,EAAQ,8BAAR,CAFC,EAGJ;AACEF,MAAAA,IAAI,EAAEE,KAAK,CAACJ,QAAN,CAAeE;AADvB,KAHI,CAAN;AAOD;;AAED,QAAM,IAAIN,SAAJ,CAAcQ,KAAK,CAACJ,QAAN,CAAeC,MAA7B,EAAqCG,KAAK,CAACJ,QAAN,CAAeK,UAApD,CAAN;AACD,CAZM;AAcP,gBAAe,OAAOC,OAAP,EAAgBC,WAAW,GAAGZ,KAA9B,KAAwC;AAAA,QAC7Ca,MAD6C,GACnBF,OADmB,CAC7CE,MAD6C;AAAA,QACrCN,IADqC,GACnBI,OADmB,CACrCJ,IADqC;AAAA,QAC/BO,OAD+B,GACnBH,OADmB,CAC/BG,OAD+B;AAAA,MAE/CC,GAF+C,GAEvCJ,OAFuC,CAE/CI,GAF+C;AAGrD,QAAMC,MAAM,GAAG,IAAIC,eAAJ,EAAf;;AAEA,MAAIH,OAAO,CAAC,cAAD,CAAP,IAA2B,mCAA/B,EAAoE;AAClEI,IAAAA,MAAM,CAACC,IAAP,CAAYZ,IAAZ,EAAkBa,GAAlB,CAAsBC,OAAO,IAAIL,MAAM,CAACM,MAAP,CAAcD,OAAd,EAAuBd,IAAI,CAACc,OAAD,CAA3B,CAAjC;AACA,WAAOT,WAAW,CAACW,IAAZ,CAAiBR,GAAjB,EAAsBC,MAAtB,CAAP;AACD,GAHD,MAGO;AACL,QAAIH,MAAM,KAAK,KAAf,EAAsB;AACpB,UAAIN,IAAJ,EAAU;AACRQ,QAAAA,GAAG,IAAK,IAAGZ,SAAS,CAACI,IAAD,CAAO,EAA3B;AACD;AACF;;AAED,WAAOK,WAAW,CACfD,OADI,CACI;AACPE,MAAAA,MADO;AAEPE,MAAAA,GAFO;AAGPD,MAAAA,OAAO,EAAEI,MAAM,CAACM,MAAP,CAAc,EAAd,EAAkBV,OAAlB,CAHF;AAIPP,MAAAA;AAJO,KADJ,EAOJkB,IAPI,CAOCrB,eAPD,EAOkBK,KAAK,IAAI;AAC9BiB,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwClB,KAAxC,EAD8B,CAE9B;AACD,KAVI,CAAP;AAWD;AACF,CA3BD","sourcesContent":["import axios from 'axios';\nimport HttpError from 'standard-http-error';\nimport get from 'lodash/get';\nimport { serialize } from './helper';\n\nexport const successResponse = response => ({\n  status: response.status,\n  data: response.data,\n});\n\nexport const throwHttpError = error => {\n  if (error.response.data) {\n    throw new HttpError(\n      get(error, 'response.data.status.code'),\n      get(error, 'response.data.status.message'),\n      {\n        data: error.response.data,\n      }\n    );\n  }\n\n  throw new HttpError(error.response.status, error.response.statusText);\n};\n\nexport default async (request, httpService = axios) => {\n  const { method, data, headers } = request;\n  let { url } = request;\n  const params = new URLSearchParams();\n\n  if (headers['Content-Type'] == 'application/x-www-form-urlencoded') {\n    Object.keys(data).map(keyName => params.append(keyName, data[keyName]));\n    return httpService.post(url, params);\n  } else {\n    if (method === 'GET') {\n      if (data) {\n        url += `?${serialize(data)}`;\n      }\n    }\n\n    return httpService\n      .request({\n        method,\n        url,\n        headers: Object.assign({}, headers),\n        data,\n      })\n      .then(successResponse, error => {\n        console.log('server error occured ==>', error);\n        // throwHttpError(error);\n      });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}