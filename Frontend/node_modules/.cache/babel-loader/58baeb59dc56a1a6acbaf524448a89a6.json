{"ast":null,"code":"// import axios from \"axios\";\n// import HttpError from \"standard-http-error\";\n// import { get } from \"lodash\";\n// import { serialize, getLocalstorage } from \"../helper\";\n// export const successResponse = response => ({\n//   status: response.status,\n//   data: response.data\n// });\n// export const throwHttpError = error => {\n//   if (error.response.data) {\n//     throw new HttpError(\n//       get(error, \"response.data.status.code\"),\n//       get(error, \"response.data.status.message\"),\n//       {\n//         data: error.response.data\n//       }\n//     );\n//   }\n//   throw new HttpError(error.response.status, error.response.statusText);\n// };\n// export default async (request, httpService = axios) => {\n//   const { method, data, headers } = request;\n//   let { url } = request;\n//   const token = getLocalstorage(\"token\");\n//   if (token) {\n//     headers.Authorization = `Bearer ${token}`;\n//   }\n//   const CancelToken = axios.CancelToken;\n//   const source = CancelToken.source();\n//   if (!window.axios_source) {\n//     window.axios_source = [];\n//   }\n//   window.axios_source.push(source);\n//   if (method === \"GET\") {\n//     if (data) {\n//       url += `?${serialize(data)}`;\n//     }\n//   }\n//   return httpService\n//     .request({\n//       method,\n//       url,\n//       headers: Object.assign({}, headers),\n//       data\n//     })\n//     .then(successResponse, error => {\n//       throwHttpError(error);\n//     });\n// };","map":{"version":3,"sources":["/home/ttn/Documents/yoga_studio/src/Services/requestService.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import axios from \"axios\";\n// import HttpError from \"standard-http-error\";\n// import { get } from \"lodash\";\n// import { serialize, getLocalstorage } from \"../helper\";\n\n// export const successResponse = response => ({\n//   status: response.status,\n//   data: response.data\n// });\n\n// export const throwHttpError = error => {\n//   if (error.response.data) {\n//     throw new HttpError(\n//       get(error, \"response.data.status.code\"),\n//       get(error, \"response.data.status.message\"),\n//       {\n//         data: error.response.data\n//       }\n//     );\n//   }\n//   throw new HttpError(error.response.status, error.response.statusText);\n// };\n\n// export default async (request, httpService = axios) => {\n//   const { method, data, headers } = request;\n//   let { url } = request;\n//   const token = getLocalstorage(\"token\");\n//   if (token) {\n//     headers.Authorization = `Bearer ${token}`;\n//   }\n\n//   const CancelToken = axios.CancelToken;\n//   const source = CancelToken.source();\n//   if (!window.axios_source) {\n//     window.axios_source = [];\n//   }\n//   window.axios_source.push(source);\n\n//   if (method === \"GET\") {\n//     if (data) {\n//       url += `?${serialize(data)}`;\n//     }\n//   }\n//   return httpService\n//     .request({\n//       method,\n//       url,\n//       headers: Object.assign({}, headers),\n//       data\n//     })\n//     .then(successResponse, error => {\n//       throwHttpError(error);\n//     });\n// };\n"]},"metadata":{},"sourceType":"module"}