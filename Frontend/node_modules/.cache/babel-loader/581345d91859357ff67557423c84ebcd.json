{"ast":null,"code":"import axios from \"axios\";\nimport HttpError from \"standard-http-error\";\nimport { get } from \"lodash\";\nimport { serialize, getLocalstorage } from \"../helper\";\nexport const successResponse = response => ({\n  status: response.status,\n  data: response.data\n});\nexport const throwHttpError = error => {\n  if (error.response.data) {\n    throw new HttpError(get(error, \"response.data.status.code\"), get(error, \"response.data.status.message\"), {\n      data: error.response.data\n    });\n  }\n\n  throw new HttpError(error.response.status, error.response.statusText);\n};\nexport default (async (request, httpService = axios) => {\n  const method = request.method,\n        data = request.data,\n        headers = request.headers;\n  let url = request.url;\n  const token = getLocalstorage(\"token\");\n\n  if (token) {\n    headers.Authorization = `Bearer ${token}`;\n  }\n\n  const CancelToken = axios.CancelToken;\n  const source = CancelToken.source();\n\n  if (!window.axios_source) {\n    window.axios_source = [];\n  }\n\n  window.axios_source.push(source);\n\n  if (method === \"GET\") {\n    if (data) {\n      url += `?${serialize(data)}`;\n    }\n  }\n\n  return httpService.request({\n    method,\n    url,\n    headers: Object.assign({}, headers),\n    data\n  }).then(successResponse, error => {\n    throwHttpError(error);\n  });\n});","map":{"version":3,"sources":["/home/ttn/Documents/yoga_studio/src/Services/requestService.js"],"names":["axios","HttpError","get","serialize","getLocalstorage","successResponse","response","status","data","throwHttpError","error","statusText","request","httpService","method","headers","url","token","Authorization","CancelToken","source","window","axios_source","push","Object","assign","then"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,SAASC,SAAT,EAAoBC,eAApB,QAA2C,WAA3C;AAEA,OAAO,MAAMC,eAAe,GAAGC,QAAQ,KAAK;AAC1CC,EAAAA,MAAM,EAAED,QAAQ,CAACC,MADyB;AAE1CC,EAAAA,IAAI,EAAEF,QAAQ,CAACE;AAF2B,CAAL,CAAhC;AAKP,OAAO,MAAMC,cAAc,GAAGC,KAAK,IAAI;AACrC,MAAIA,KAAK,CAACJ,QAAN,CAAeE,IAAnB,EAAyB;AACvB,UAAM,IAAIP,SAAJ,CACJC,GAAG,CAACQ,KAAD,EAAQ,2BAAR,CADC,EAEJR,GAAG,CAACQ,KAAD,EAAQ,8BAAR,CAFC,EAGJ;AACEF,MAAAA,IAAI,EAAEE,KAAK,CAACJ,QAAN,CAAeE;AADvB,KAHI,CAAN;AAOD;;AACD,QAAM,IAAIP,SAAJ,CAAcS,KAAK,CAACJ,QAAN,CAAeC,MAA7B,EAAqCG,KAAK,CAACJ,QAAN,CAAeK,UAApD,CAAN;AACD,CAXM;AAaP,gBAAe,OAAOC,OAAP,EAAgBC,WAAW,GAAGb,KAA9B,KAAwC;AAAA,QAC7Cc,MAD6C,GACnBF,OADmB,CAC7CE,MAD6C;AAAA,QACrCN,IADqC,GACnBI,OADmB,CACrCJ,IADqC;AAAA,QAC/BO,OAD+B,GACnBH,OADmB,CAC/BG,OAD+B;AAAA,MAE/CC,GAF+C,GAEvCJ,OAFuC,CAE/CI,GAF+C;AAGrD,QAAMC,KAAK,GAAGb,eAAe,CAAC,OAAD,CAA7B;;AACA,MAAIa,KAAJ,EAAW;AACTF,IAAAA,OAAO,CAACG,aAAR,GAAyB,UAASD,KAAM,EAAxC;AACD;;AAED,QAAME,WAAW,GAAGnB,KAAK,CAACmB,WAA1B;AACA,QAAMC,MAAM,GAAGD,WAAW,CAACC,MAAZ,EAAf;;AACA,MAAI,CAACC,MAAM,CAACC,YAAZ,EAA0B;AACxBD,IAAAA,MAAM,CAACC,YAAP,GAAsB,EAAtB;AACD;;AACDD,EAAAA,MAAM,CAACC,YAAP,CAAoBC,IAApB,CAAyBH,MAAzB;;AAEA,MAAIN,MAAM,KAAK,KAAf,EAAsB;AACpB,QAAIN,IAAJ,EAAU;AACRQ,MAAAA,GAAG,IAAK,IAAGb,SAAS,CAACK,IAAD,CAAO,EAA3B;AACD;AACF;;AACD,SAAOK,WAAW,CACfD,OADI,CACI;AACPE,IAAAA,MADO;AAEPE,IAAAA,GAFO;AAGPD,IAAAA,OAAO,EAAES,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,OAAlB,CAHF;AAIPP,IAAAA;AAJO,GADJ,EAOJkB,IAPI,CAOCrB,eAPD,EAOkBK,KAAK,IAAI;AAC9BD,IAAAA,cAAc,CAACC,KAAD,CAAd;AACD,GATI,CAAP;AAUD,CA9BD","sourcesContent":["import axios from \"axios\";\nimport HttpError from \"standard-http-error\";\nimport { get } from \"lodash\";\nimport { serialize, getLocalstorage } from \"../helper\";\n\nexport const successResponse = response => ({\n  status: response.status,\n  data: response.data\n});\n\nexport const throwHttpError = error => {\n  if (error.response.data) {\n    throw new HttpError(\n      get(error, \"response.data.status.code\"),\n      get(error, \"response.data.status.message\"),\n      {\n        data: error.response.data\n      }\n    );\n  }\n  throw new HttpError(error.response.status, error.response.statusText);\n};\n\nexport default async (request, httpService = axios) => {\n  const { method, data, headers } = request;\n  let { url } = request;\n  const token = getLocalstorage(\"token\");\n  if (token) {\n    headers.Authorization = `Bearer ${token}`;\n  }\n\n  const CancelToken = axios.CancelToken;\n  const source = CancelToken.source();\n  if (!window.axios_source) {\n    window.axios_source = [];\n  }\n  window.axios_source.push(source);\n\n  if (method === \"GET\") {\n    if (data) {\n      url += `?${serialize(data)}`;\n    }\n  }\n  return httpService\n    .request({\n      method,\n      url,\n      headers: Object.assign({}, headers),\n      data\n    })\n    .then(successResponse, error => {\n      throwHttpError(error);\n    });\n};\n"]},"metadata":{},"sourceType":"module"}